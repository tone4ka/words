import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAppSelector, useAppDispatch } from "../store/hooks";
import { fetchWordListsRequest } from "../store/slices/wordsSlice";
import { supabase } from "../services/supabase";

interface WordPair {
  id: string;
  word: string;
  translation: string;
}

interface ValidationErrors {
  listName?: string;
  wordPairs?: string;
  general?: string;
}

const CreateListPage: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state) => state.auth);
  const [listName, setListName] = useState("");
  const [wordPairs, setWordPairs] = useState<WordPair[]>(
    Array.from({ length: 20 }, (_, index) => ({
      id: `pair-${index}`,
      word: "",
      translation: "",
    }))
  );
  const [errors, setErrors] = useState<ValidationErrors>({});
  const [isLoading, setIsLoading] = useState(false);

  const handleWordPairChange = (
    index: number,
    field: "word" | "translation",
    value: string
  ) => {
    const newWordPairs = [...wordPairs];
    newWordPairs[index][field] = value;
    setWordPairs(newWordPairs);
  };

  const addNewWordPair = () => {
    const newPair: WordPair = {
      id: `pair-${wordPairs.length}`,
      word: "",
      translation: "",
    };
    setWordPairs([...wordPairs, newPair]);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–µ—Ä–≤—ã–µ 20 –ø–∞—Ä
  const areFirst20PairsFilled = wordPairs
    .slice(0, 20)
    .every((pair) => pair.word.trim() && pair.translation.trim());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–ª–æ–≤
  const getDuplicateWords = (): Set<string> => {
    const words = wordPairs
      .filter((pair) => pair.word.trim())
      .map((pair) => pair.word.trim().toLowerCase());

    const wordCounts = new Map<string, number>();
    words.forEach((word) => {
      wordCounts.set(word, (wordCounts.get(word) || 0) + 1);
    });

    return new Set(
      Array.from(wordCounts.entries())
        .filter(([, count]) => count > 1)
        .map(([word]) => word)
    );
  };

  const duplicateWords = getDuplicateWords();

  const validateForm = async (): Promise<boolean> => {
    const newErrors: ValidationErrors = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if (!listName.trim()) {
      newErrors.listName = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏—Å–∫–∞";
    } else {
      try {
        const { data, error } = await supabase
          .from("words")
          .select("list_name")
          .eq("list_name", listName.trim())
          .limit(1);

        if (error) throw error;

        if (data && data.length > 0) {
          newErrors.listName = "–°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
        }
      } catch (error) {
        console.error("Error checking list name:", error);
        newErrors.general = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞";
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ–ø–æ–ª–Ω—ã–µ –ø–∞—Ä—ã (–∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω–ø—É—Ç)
    const incompletePairs = wordPairs.filter(
      (pair) =>
        (pair.word.trim() && !pair.translation.trim()) ||
        (!pair.word.trim() && pair.translation.trim())
    );

    if (incompletePairs.length > 0) {
      newErrors.wordPairs =
        "–í—Å–µ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é (–∏ —Å–ª–æ–≤–æ, –∏ –ø–µ—Ä–µ–≤–æ–¥)";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–∏–Ω–∏–º—É–º 4 –ø–∞—Ä—ã —Å–ª–æ–≤
    const filledPairs = wordPairs.filter(
      (pair) => pair.word.trim() && pair.translation.trim()
    );

    if (filledPairs.length < 4 && !newErrors.wordPairs) {
      newErrors.wordPairs = "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 4 –ø–∞—Ä—ã —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    const words = filledPairs.map((pair) => pair.word.trim().toLowerCase());
    const uniqueWords = new Set(words);

    if (words.length !== uniqueWords.size && !newErrors.wordPairs) {
      newErrors.wordPairs =
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) {
      setErrors({ general: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
      return;
    }

    setIsLoading(true);
    setErrors({});

    try {
      const isValid = await validateForm();
      if (!isValid) {
        setIsLoading(false);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
      const filledPairs = wordPairs.filter(
        (pair) => pair.word.trim() && pair.translation.trim()
      );

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const wordsToInsert = filledPairs.map((pair) => ({
        list_name: listName.trim(),
        value: pair.word.trim(),
        translation: pair.translation.trim(),
        user_id: user.id,
      }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase.from("words").insert(wordsToInsert);

      if (error) throw error;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ store
      dispatch(fetchWordListsRequest());

      // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      navigate("/dashboard");
    } catch (error) {
      console.error("Error saving word list:", error);
      setErrors({ general: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤" });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    navigate("/dashboard");
  };

  return (
    <div className="create-list-container">
      <div className="create-list-card">
        <div className="create-list-header">
          <h2>üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤</h2>
          <button
            type="button"
            onClick={handleCancel}
            className="cancel-btn"
            disabled={isLoading}
          >
            ‚úï
          </button>
        </div>

        <form onSubmit={handleSubmit} className="create-list-form">
          {/* –ü–æ–ª–µ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞ */}
          <div className="create-list-form-group">
            <input
              type="text"
              value={listName}
              onChange={(e) => setListName(e.target.value)}
              placeholder="–î–æ–±–∞–≤—å –∏–º—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤"
              className={`list-name-input ${errors.listName ? "error" : ""}`}
              disabled={isLoading}
            />
            {errors.listName && (
              <div className="create-list-error-message">{errors.listName}</div>
            )}
          </div>

          {/* –ü–∞—Ä—ã —Å–ª–æ–≤ */}
          <div className="word-pairs-section">
            <h3>üí≠ –°–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã</h3>
            <div className="word-pairs-grid">
              {wordPairs.map((pair, index) => {
                const isDuplicateWord =
                  pair.word.trim() &&
                  duplicateWords.has(pair.word.trim().toLowerCase());

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö –ø–∞—Ä
                const isIncompleteWord =
                  pair.word.trim() && !pair.translation.trim();
                const isIncompleteTranslation =
                  !pair.word.trim() && pair.translation.trim();

                return (
                  <div key={pair.id} className="word-pair-row">
                    <span className="row-number">{index + 1}.</span>
                    <input
                      type="text"
                      value={pair.word}
                      onChange={(e) =>
                        handleWordPairChange(index, "word", e.target.value)
                      }
                      placeholder="–°–ª–æ–≤–æ"
                      className={`word-input ${
                        isDuplicateWord ? "duplicate-error" : ""
                      } ${isIncompleteWord ? "incomplete-error" : ""}`}
                      disabled={isLoading}
                    />
                    <span className="separator">‚Äî</span>
                    <input
                      type="text"
                      value={pair.translation}
                      onChange={(e) =>
                        handleWordPairChange(
                          index,
                          "translation",
                          e.target.value
                        )
                      }
                      placeholder="–ü–µ—Ä–µ–≤–æ–¥"
                      className={`translation-input ${
                        isIncompleteTranslation ? "incomplete-error" : ""
                      }`}
                      disabled={isLoading}
                    />
                  </div>
                );
              })}
            </div>
            {errors.wordPairs && (
              <div className="create-list-error-message">
                {errors.wordPairs}
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ */}
            {areFirst20PairsFilled && (
              <div className="add-word-section">
                <button
                  type="button"
                  onClick={addNewWordPair}
                  className="add-word-btn"
                  disabled={isLoading}
                >
                  ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
                </button>
              </div>
            )}
          </div>

          {/* –û–±—â–∏–µ –æ—à–∏–±–∫–∏ */}
          {errors.general && (
            <div className="create-list-error-message general-error">
              {errors.general}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="form-actions">
            <button
              type="button"
              onClick={handleCancel}
              className="cancel-action-btn"
              disabled={isLoading}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className="save-btn" disabled={isLoading}>
              {isLoading ? "‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateListPage;
